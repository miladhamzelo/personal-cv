!function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=15)}([function(e,t){e.exports=require("react")},function(e,t){e.exports=require("material-ui/IconButton")},function(e,t){e.exports=require("redux")},function(e,t){e.exports=require("react-redux")},function(e,t){e.exports=require("react-router-config")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(0),i=(r(o),n(19)),l=r(i);t.default=[a({},l.default,{path:"/",exact:!0}),a({},l.default)]},function(e,t){e.exports=require("material-ui/List")},function(e,t){e.exports=require("material-ui/Subheader")},function(e,t){e.exports=require("material-ui/svg-icons/action/flight-takeoff")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(0),u=r(c),s=n(49),f=r(s),d=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"render",value:function(){return u.default.createElement(f.default,{newZoom:this.props.newZoom,center:this.props.center,location:this.props.location,company:this.props.company})}}]),t}(c.Component);t.default=d},function(e,t){e.exports=require("material-ui/svg-icons/action/info")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.badgeClassMappings={linkedIn:"linked-in-badge",github:"github-badge",email:"email-badge"},t.badgeItemInfo=[{iconKey:"linkedIn",type:"Linked In Profile",action:"Go",url:"https://www.linkedin.com/in/shane-arthur-8b902071/"},{iconKey:"github",type:"Github Profile",action:"Go",url:"http://github.com/shane-arthur"},{iconKey:"email",type:"Contact Me",action:"Email",url:""}]},function(e,t,n){"use strict";function r(e){return{type:u.SET_SELECTED_CATEGORY,displayKey:e}}function a(){return{type:u.CLEAR_CATEGORIES}}function o(){return{type:u.NEXT_SLIDE}}function i(){return{type:u.PREV_SLIDE}}function l(){return{type:u.SHOW_HIDE_PAPER}}Object.defineProperty(t,"__esModule",{value:!0}),t.setCategory=r,t.clearCategories=a,t.goToNextSlide=o,t.goToPrevSlide=i,t.showExperiencePaper=l;var c=n(13),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.SET_SELECTED_CATEGORY="SET_SELECTED_CATEGORY",t.CLEAR_CATEGORIES="CLEAR_CATEGORIES",t.NEXT_SLIDE="NEXT_SLIDE",t.PREV_SLIDE="PREV_SLIDE",t.SHOW_HIDE_PAPER="SHOW_HIDE_PAPER"},function(e,t){e.exports=require("react-helmet")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}n(16);var a=n(17),o=r(a),i=n(4),l=n(18),c=r(l),u=n(5),s=r(u),f=n(68),d=r(f),p=n(75),m=r(p),y=(0,o.default)(),h=process.env.PORT||3e3;y.use("/api",(0,c.default)("http://react-ssr-api.herokuapp.com",{proxyReqOptDecorator:function(e){return e.headers["x-forwarded-host"]="localhost:3000",e}})),y.use(o.default.static("public")),y.get("*",function(e,t){var n=(0,m.default)(e),r=(0,i.matchRoutes)(s.default,e.path).map(function(e){var t=e.route;return t.loadData?t.loadData(n):null}).map(function(e){if(e)return new Promise(function(t,n){e.then(t).catch(t)})});Promise.all(r).then(function(){var r={},a=(0,d.default)(e,n,r);if(r.url)return t.redirect(301,r.url);r.notFound&&t.status(404),t.send(a)})}),y.listen(h,function(){console.log("Listening on port "+h)})},function(e,t){e.exports=require("babel-polyfill")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("express-http-proxy")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function l(e){return{resumeCategories:e.reducer.categories,experience:e.reducer.experience,selectedSlide:e.reducer.selectedTile,showExperience:e.reducer.showExperience}}function c(e){return{actions:(0,m.bindActionCreators)(v,e)}}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(0),f=r(s),d=n(20),p=r(d),m=n(2),y=n(3),h=n(12),v=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(h),g=n(14),b=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),u(t,[{key:"_getDisplayKey",value:function(){var e=this.props.resumeCategories,t=e.find(function(e){return e.selected});return t?t.key:null}},{key:"_formHead",value:function(){return f.default.createElement(g.Helmet,null,f.default.createElement("meta",{property:"og:title",content:"Shane's CV"}),f.default.createElement("meta",{property:"og:type",content:"website"}),f.default.createElement("meta",{property:"og:url",content:"http://www.shane-arthur.com"}),f.default.createElement("meta",{property:"og:image",content:"https://cdn3.iconfinder.com/data/icons/business-vol-2/72/72-512.png"}),f.default.createElement("title",null," Shane's CV "))}},{key:"render",value:function(){var e=this._getDisplayKey();return f.default.createElement("div",null,this._formHead(),f.default.createElement(p.default,{experience:this.props.experience,categories:this.props.resumeCategories,actions:this.props.actions,selectedKey:e,selectedSlide:this.props.selectedSlide,showExperience:this.props.showExperience}))}}]),t}(s.Component);t.default={component:(0,y.connect)(l,c)(b)}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),o=r(a),i=n(21),l=r(i),c=n(29),u=r(c),s=function(e){var t=function(){return e.selectedKey?o.default.createElement(u.default,{actions:e.actions,displayKey:e.selectedKey,experience:e.experience,showExperience:e.showExperience,selectedSlide:e.selectedSlide}):o.default.createElement(l.default,{categories:e.categories,actions:e.actions})}();return o.default.createElement("div",{className:"city-backdrop position-vertical-centered"},t)};t.default=s},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(0),u=r(c),s=n(22),f=r(s),d=n(24),p=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"_getSelectedCategory",value:function(){var e=this.props.categories.find(function(e){return!0===e.selected});return e?e.displayKey:e}},{key:"render",value:function(){var e=this._getSelectedCategory();return u.default.createElement(f.default,{actions:this.props.actions,categories:this.props.categories,itemCount:d.icons.length,displayIcons:d.icons,selectedKey:e})}}]),t}(c.Component);t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),o=r(a),i=n(23),l=r(i),c=function(e){var t=function(){for(var t=[],n=0;n<e.itemCount;n++){var r=n+1,a="circle-quarter-"+e.categories[n].iconIndex,i=o.default.createElement("div",{onClick:e.actions.setCategory.bind(void 0,e.categories[n].key),key:n,className:a}," ",o.default.createElement(l.default,{title:e.categories[n].title,displayKey:e.categories[n].key,actions:e.actions,index:r,icon:e.displayIcons[n]}));t.push(i)}return t}();return o.default.createElement("div",{className:"category-selector-wrapper position-horizontal-centered"},o.default.createElement("div",{className:"category-selector-widget-wrapper position-horizontal-centered"},t))};t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),a=function(e){return e&&e.__esModule?e:{default:e}}(r),o=function(e){var t={width:"48px",height:"48px"};return a.default.createElement("div",{onClick:e.actions.setCategory.bind(void 0,e.displayKey)},function(){return e.index>2?a.default.createElement("div",{className:"category-item-wrapper gap-top"},a.default.createElement("p",null," ",e.title)," ",a.default.createElement(e.icon,{style:t})):a.default.createElement("div",{className:"category-item-wrapper"},a.default.createElement("div",{className:"filler"}),a.default.createElement(e.icon,{style:t}),a.default.createElement("p",null,e.title))}())};t.default=o},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.icons=void 0;var a=n(25),o=r(a),i=n(26),l=r(i),c=n(27),u=r(c),s=n(28),f=r(s);t.icons=[o.default,l.default,u.default,f.default]},function(e,t){e.exports=require("material-ui/svg-icons/places/smoking-rooms")},function(e,t){e.exports=require("material-ui/svg-icons/social/whatshot")},function(e,t){e.exports=require("material-ui/svg-icons/places/fitness-center")},function(e,t){e.exports=require("material-ui/svg-icons/notification/adb")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(0),u=r(c),s=n(30),f=r(s),d=(n(2),n(3),n(12)),p=(function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);t.default=e}(d),function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"_showContentSwitcher",value:function(){return"experience"===this.props.displayKey&&!this.props.showExperience}},{key:"render",value:function(){return u.default.createElement(f.default,{actions:this.props.actions,displayKey:this.props.displayKey,experience:this.props.experience,selectedSlide:this.props.selectedSlide,showExperience:this.props.showExperience,showContentSwitcher:this._showContentSwitcher()})}}]),t}(c.Component));t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),o=r(a),i=n(31),l=r(i),c=n(1),u=r(c),s=n(32),f=r(s),d=n(65),p=r(d),m=function(e){var t=function(){return e.showExperience?o.default.createElement("div",{className:"exit-to-main-container"},o.default.createElement(u.default,{onClick:e.actions.showExperiencePaper},o.default.createElement(l.default,null))):o.default.createElement("div",{className:"exit-to-main-container"},o.default.createElement(u.default,{onClick:e.actions.clearCategories},o.default.createElement(l.default,null)))}();return o.default.createElement("div",{className:"content-component-wrapper"},t,o.default.createElement(p.default,{showSwitcher:e.showContentSwitcher,next:e.actions.goToNextSlide,prev:e.actions.goToPrevSlide}),o.default.createElement(f.default,{showExperience:e.showExperience,experience:e.experience,displayKey:e.displayKey,selectedSlide:e.selectedSlide,actions:e.actions}))};t.default=m},function(e,t){e.exports=require("material-ui/svg-icons/action/exit-to-app")},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),c=function(e){return e&&e.__esModule?e:{default:e}}(l),u=n(33),s=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),i(t,[{key:"_getSelectedComponent",value:function(){return u.config[this.props.displayKey]}},{key:"render",value:function(){var e=this._getSelectedComponent();return c.default.createElement(e,{props:this.props})}}]),t}(l.Component);t.default=s},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.config=void 0;var a=n(34),o=r(a),i=n(58),l=r(i),c=n(62),u=r(c),s=n(63),f=r(s);t.config={skills:f.default,experience:o.default,contactMe:l.default,education:u.default}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(0),u=r(c),s=n(35),f=r(s),d=n(55),p=r(d),m=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"_renderComponent",value:function(){var e=this.props.props.experience[this.props.props.selectedSlide];return this.props.props.showExperience?u.default.createElement(p.default,{jobKey:e.key,jobTitle:e.company}):u.default.createElement(f.default,{actions:this.props.props.actions,experience:this.props.props.experience,selectedSlide:this.props.props.selectedSlide})}},{key:"render",value:function(){return this._renderComponent()}}]),t}(c.Component);t.default=m},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),o=r(a),i=n(36),l=r(i),c=n(7),u=r(c),s=n(9),f=r(s),d=n(10),p=r(d),m=n(54),y=n(1),h=r(y),v=function(e){var t=function(t){return e.experience[e.selectedSlide]}(),n=function(){var e=["association-header"];return e.push(m.classMappings[t.key]),e}();return o.default.createElement("div",null,o.default.createElement("h2",null," Experience "),o.default.createElement("div",{className:"experience-component-container position-horizontal-centered"},o.default.createElement("div",{className:"header-container"},o.default.createElement("div",{className:"association-header-container"},o.default.createElement("div",{className:n.join(", ")})),o.default.createElement("div",{className:"association-info-container"},o.default.createElement("span",{className:"org-name"}," ",t.company),o.default.createElement("span",{className:"date-worked"}," ",t.date.start," - ",t.date.end),o.default.createElement("span",{className:"role-container"}," ",t.title,"  "),o.default.createElement("span",{className:"job-info-container"}," ",o.default.createElement(h.default,{onClick:e.actions.showExperiencePaper},o.default.createElement(p.default,null)," ")," "))),o.default.createElement("div",{className:"work-history-container"},o.default.createElement("div",{className:"form-tech-list"},o.default.createElement("div",{className:"subheader-container"},o.default.createElement(u.default,null," Relevent Skills ")),o.default.createElement("div",{className:"tech-list-container"},o.default.createElement(l.default,{items:function(e){return m.skills[e]}(t.key)}))),o.default.createElement("div",{className:"work-information-container"},o.default.createElement("div",{className:"subheader-container"},o.default.createElement(u.default,null,"Position Information")),o.default.createElement("div",{className:"map-container"},o.default.createElement(f.default,{center:t.center,location:t.location,company:t.company}))))))};t.default=v},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),o=r(a),i=n(6),l=n(7),c=(r(l),n(37)),u=(r(c),n(38)),s=n(8),f=(r(s),function(e){var t=function(e){return u.PictureMappings[e]},n=function(){return e.items.map(function(e){return o.default.createElement(i.ListItem,{key:e.title,primaryText:e.title,leftAvatar:t(e.avatarKey),rightIcon:null})})}();return o.default.createElement(i.List,null,n)});t.default=f},function(e,t){e.exports=require("material-ui/svg-icons/communication/chat-bubble")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.PictureMappings=void 0;var a=n(39),o=r(a),i=n(40),l=r(i),c=n(41),u=r(c),s=n(42),f=r(s),d=n(43),p=r(d),m=n(8),y=r(m),h=n(44),v=r(h),g=n(45),b=r(g),E=n(46),w=r(E),_=n(47),x=r(_),S=n(48),O=r(S),P=n(0),j=r(P);t.PictureMappings={takeoff:j.default.createElement(o.default,null),beenhere:j.default.createElement(p.default,null),accessibiity:j.default.createElement(y.default,null),build:j.default.createElement(l.default,null),grade:j.default.createElement(u.default,null),pet:j.default.createElement(f.default,null),hourglass:j.default.createElement(v.default,null),motorcycle:j.default.createElement(b.default,null),fingerprint:j.default.createElement(w.default,null),gavel:j.default.createElement(x.default,null),rowing:j.default.createElement(O.default,null)}},function(e,t){e.exports=require("material-ui/svg-icons/action/accessibility")},function(e,t){e.exports=require("material-ui/svg-icons/action/build")},function(e,t){e.exports=require("material-ui/svg-icons/action/grade")},function(e,t){e.exports=require("material-ui/svg-icons/action/pets")},function(e,t){e.exports=require("material-ui/svg-icons/maps/beenhere")},function(e,t){e.exports=require("material-ui/svg-icons/action/hourglass-full")},function(e,t){e.exports=require("material-ui/svg-icons/action/motorcycle")},function(e,t){e.exports=require("material-ui/svg-icons/action/fingerprint")},function(e,t){e.exports=require("material-ui/svg-icons/action/gavel")},function(e,t){e.exports=require("material-ui/svg-icons/action/rowing")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),o=r(a),i=n(50),l=n(51),c=n(52),u=r(c),s=function(e,t){return e.map(function(e){return o.default.createElement(u.default,{key:t,company:t,location:e})})},f=function(e){return e||10},d=(0,i.compose)((0,i.withProps)({googleMapURL:"https://maps.googleapis.com/maps/api/js?key=AIzaSyDu-_YjVbz6XfRXKv0HT45AoCIXPTXctKo&v=3.exp&libraries=geometry,drawing,places",loadingElement:o.default.createElement("div",{style:{height:"100%"}}),containerElement:o.default.createElement("div",{style:{height:"inherit"}}),mapElement:o.default.createElement("div",{style:{height:"100%"}})}),l.withScriptjs,l.withGoogleMap)(function(e){return o.default.createElement(l.GoogleMap,{defaultZoom:f(e.newZoom),center:{lat:e.center.lat,lng:e.center.lng}},s(e.location,e.company))});t.default=d},function(e,t){e.exports=require("recompose")},function(e,t){e.exports=require("react-google-maps")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),a=function(e){return e&&e.__esModule?e:{default:e}}(r),o=n(53),i=function(e){return a.default.createElement(o.MarkerWithLabel,{position:{lat:e.location.lat,lng:e.location.lng},labelAnchor:new google.maps.Point(0,0),labelStyle:{color:"#ffffff",height:"25px",lineHeight:"25px",width:"75px",fontSize:"0.5rem",padding:"5px",backgroundColor:"#ff9999",borderRadius:"10px"}},a.default.createElement("div",{className:"marker-content"},e.company))};t.default=i},function(e,t){e.exports=require("react-google-maps/lib/components/addons/MarkerWithLabel")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.classMappings={sfw:"safeway-img",gnx:"gnx-img",ntt:"ntt-img",inf:"inf-img",cap:"cap-img",hdc:"hdc-img"},t.skills={sfw:[{title:"ASP.NET MVC 5",avatarKey:"motorcycle"},{title:"JQuery UI",avatarKey:"beenhere"},{title:"LESS",avatarKey:"hourglass"},{title:"C# 5.0",avatarKey:"gavel"},{title:"Linq",avatarKey:"rowing"}],gnx:[{title:"ASP.NET Webforms",avatarKey:"takeoff"},{title:"ASP.NET MVC 4",avatarKey:"beenhere"},{title:"JQuery Mobile",avatarKey:"fingerprint"},{title:"Entity Framework",avatarKey:"motorcycle"},{title:"MSSql - Azure",avatarKey:"gavel"}],ntt:[{title:"Java 6 - Spring MVC",avatarKey:"motorcycle"},{title:"Tomcat 7x",avatarKey:"gavel"},{title:"NHibernate",avatarKey:"rowing"},{title:"PostGres SQL",avatarKey:"pet"}],inf:[{title:"React",avatarKey:"beenhere"},{title:"Redux",avatarKey:"accessibiity"},{title:"webpack",avatarKey:"motorcycle"},{title:"SASS",avatarKey:"gavel"},{title:"Angular 1x",avatarKey:"rowing"},{title:"PostGres SQL",avatarKey:"build"},{title:"Typescript & ES6",avatarKey:"grade"}],cap:[{title:"Angular 4.x",avatarKey:"pet"},{title:"@ngrx",avatarKey:"hourglass"},{title:"Webpack 2.x",avatarKey:"motorcycle"},{title:"Rxjs",avatarKey:"fingerprint"},{title:"SASS",avatarKey:"gavel"},{title:"Material Ui",avatarKey:"rowing"},{title:"Typescript",avatarKey:"takeoff"}],hdc:[{title:"Hybris SAP 6.5",avatarKey:"fingerprint"},{title:"Angular 5",avatarKey:"motorcycle"},{title:"Typescript",avatarKey:"rowing"},{title:"@ngrx 4.x",avatarKey:"gavel"},{title:"SASS",avatarKey:"pet"},{title:"Webpack 3.x",avatarKey:"hourglass"}]}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(56),o=r(a),i=n(0),l=r(i),c=n(57),u=function(e){var t={height:"auto",width:600,textAlign:"center",display:"block",borderRadius:50,margin:"0 auto",backgroundColor:"inherit"};return l.default.createElement("div",null,l.default.createElement("div",{className:"work-details-container"},l.default.createElement(o.default,{style:t,zDepth:5,rounded:!1},l.default.createElement("h1",{className:"work-details-header"},l.default.createElement("span",{className:"job-title-container"},e.jobTitle," "),l.default.createElement("span",{className:"position-header-container"},"Job Duties : "),"  "),l.default.createElement("p",{className:"work-details"}," ",""+c.jobDuties[e.jobKey]))))};t.default=u},function(e,t){e.exports=require("material-ui/Paper")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.jobDuties={gnx:"Greennexxus is a software as a service startup, \nallowing organizations to track their environmentally friendly initiatives.\nI was a Full stack ASP.net web developer responsible for delivering and maintaining the UI for users of the platform.\nInitially the platform was web-based only, but near the end of my tenure we started introducing mobile-first web views\nand toying around with native mobile-apps using Xamarin.",sfw:"Safeway     \n\nwas in the process of being bought out by Sobeys during my contract. \nOur teams duty was to rebrand an existing mobile-first view web application while upgrading from MVC 3 to 5. \nI was a Full stack ASP.net developer responbile for delivering the mobile and web UI for the web application.",ntt:"My team was the offshore core-services team for Fidelity Investments in Durham, NC. I was a backend Java 6: Spring\nMVC developer responsible for delivering and maintaining Fidelities RESTful api which was being consumed\nby the UI team onshore. Our offshore team was fully functioning as we saw the delivery of features through from inseption to delivery - \nTeam consisted of PM's, BA's, functional QA's, manual QA's and developers.",inf:"My tenure at Infusion had me working on two projects. The first was for a US-Based financial instituion. \nI was a fullstack Javascript Developer helping build the UI for a client-based web app. This was considered cutting edge\nat the time as we were one of the first teams around to leverage react in its infancy (react 0.12-0.13). The second project\nwas for a Canadian based financial institution. The app helped call center agents streamline their work flow when \ndealing with high volumes of calls. I was a full stack developer helping deliver the client facing UI as well as dealing\nwith service-layer API developement.",cap:"During my tenure at Capco I worked on one project, an internal-facing web-application. The application\nwas the Admin Panel for BHOB Harris's customer facing mobile app.  The customer facing mobile app was \nwritten in Angular 4.x, using Ionic. The admin-desktop app was also written in Angular 4.x. I was responsible for everything\nfront-end/UI related on the Admin application.",hdc:"My latest role is with the Home Depot Canada.  Home Depot is leverging Hybris SAP 6.2 as a content\ndelivery system, among its other features. Hybris 6.5 has the ability to integrate with SPA's for view-slots. My role\nhere will be overseeing the integration and helping architect the new-front code, moving from ES5 and JSPS to \nmodern Typescript (ES6) and Angular 5."}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(0),u=r(c),s=n(59),f=r(s),d=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"render",value:function(){return u.default.createElement(f.default,null)}}]),t}(c.Component);t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),o=r(a),i=n(60),l=r(i),c=n(61),u=r(c),s=n(11),f=function(e){var t=function(){return s.badgeItemInfo.map(function(e){return o.default.createElement("span",{key:e.iconKey},o.default.createElement(u.default,{iconKey:e.iconKey,type:e.type,action:e.action,url:e.url}),o.default.createElement(u.default,null))})}(),n={height:"100px",width:"100px"};return o.default.createElement("div",{className:"contact-me-page-container"},o.default.createElement("h2",null," Contact Me "),o.default.createElement("div",{className:"contact-me-container"},o.default.createElement("div",{className:"contact-icon-header"}," ",o.default.createElement(l.default,{style:n})," "),o.default.createElement("div",{className:"contact-me-subheader-container"},"Check out my profile or send me a message"),o.default.createElement("div",{className:"contact-method-container"},t)))};t.default=f},function(e,t){e.exports=require("material-ui/svg-icons/hardware/phone-iphone")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),a=function(e){return e&&e.__esModule?e:{default:e}}(r),o=n(11),i=function(e){var t=o.badgeClassMappings[e.iconKey];return a.default.createElement("div",{className:"contact-me-badge-item-container"},a.default.createElement("span",{className:t}),a.default.createElement("span",{className:"contact-type-container"},e.type),a.default.createElement("span",{className:"contact-info-container"},a.default.createElement("a",{target:"_blank",href:e.url},e.action)))};t.default=i},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),o=r(a),i=n(9),l=r(i),c=function(){var e={center:{lat:47.575,lng:-52.74},coords:[{lat:47.5737975,lng:-52.732905}],name:"Memeorial University of Newfoundland"};return o.default.createElement("div",null,o.default.createElement("h2",null," Education "),o.default.createElement("div",{className:"education-component-container"},o.default.createElement("div",{className:"school-info-container"},o.default.createElement("div",{className:"school-image"}),o.default.createElement("div",{className:"school-info"},o.default.createElement("span",{className:"mun-container"}," Memorial Unversity of Newfoundland "),o.default.createElement("span",{className:"focus-study"},"B.Sc Computer Science "),o.default.createElement("span",{className:"degree-dates"},"2008 - 2012 "))),o.default.createElement("div",{className:"school-map-container"},o.default.createElement("div",{className:"map-container"},o.default.createElement(l.default,{newZoom:12,center:e.center,location:e.coords,company:e.name})))))};t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),o=r(a),i=n(64),l=n(10),c=r(l),u=n(6),s=function(e){window.open(e)},f=function(){var e=function(){return i.skills.map(function(e){return o.default.createElement(u.ListItem,{onClick:function(){s(e.url)},key:e.name,primaryText:e.name,leftAvatar:o.default.createElement("a",{href:e.url,target:"_blank"},o.default.createElement(c.default,null)),rightIcon:null})})}();return o.default.createElement("div",{className:"skills-header-container"},o.default.createElement("h2",null," Relevent Skills "),o.default.createElement("div",{className:"skills-list-component-container"},o.default.createElement("div",{className:"list-in-thirds"},o.default.createElement(u.List,null,e.slice(0,7))),o.default.createElement("div",{className:"list-in-thirds"},o.default.createElement(u.List,null,e.slice(7,14))),o.default.createElement("div",{className:"list-in-thirds hide-border"},o.default.createElement(u.List,null,e.slice(14,e.length-1)))))};t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.skills=[{name:"react",url:"https://reactjs.org/"},{name:"redux",url:"https://redux.js.org/docs/introduction/"},{name:"angular 1.x, 4.x & 5",url:"https://angular.io/"},{name:"@ngrx 2-4",url:"https://github.com/ngrx/platform"},{name:"ES6",url:"https://babeljs.io/learn-es2015/"},{name:"TypeScript",url:"https://www.typescriptlang.org/"},{name:"Postgres Sql",url:"https://www.postgresql.org/"},{name:"Mongo DB",url:"https://www.mongodb.com/"},{name:"SASS",url:"http://sass-lang.com/"},{name:"HTML5",url:"https://www.w3schools.com/html/html5_intro.asp"},{name:"Responsive Web Design",url:"https://www.w3schools.com/html/html_responsive.asp"},{name:"Node.js 8+",url:"https://nodejs.org/en/"},{name:"TDD - Jest & Karma/Jasmine",url:"https://github.com/dwyl/learn-tdd"},{name:"Webpack 1.x-3.x",url:"https://webpack.js.org/"},{name:"Babel 6-7",url:"https://babeljs.io/"},{name:"Java 6-8",url:"http://www.oracle.com/technetwork/java/javase/downloads/index.html"},{name:"C# 4-6",url:"https://docs.microsoft.com/en-us/dotnet/csharp/"},{name:"Spring MVC",url:"https://spring.io/guides/gs/serving-web-content/"},{name:"ASP.net MVC 4,5",url:"https://docs.microsoft.com/en-us/aspnet/mvc/mvc5"},{name:"ASP.net webforms",url:"https://www.asp.net/web-forms"},{name:"Jquery Mobile",url:"https://jquerymobile.com/"},{name:"MSSQL",url:"https://www.microsoft.com/en-ca/sql-server/sql-server-2016x"}]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),o=r(a),i=n(1),l=r(i),c=n(66),u=r(c),s=n(67),f=r(s),d=function(e){return function(){var t={float:"left"},n={float:"right"};return e.showSwitcher?o.default.createElement("div",{className:"content-switcher-container"},o.default.createElement(l.default,{style:t,onClick:e.prev.bind(void 0)},o.default.createElement(u.default,{style:t})),o.default.createElement(l.default,{style:n,onClick:e.next.bind(void 0)},o.default.createElement(f.default,{style:n}))):null}()};t.default=d},function(e,t){e.exports=require("material-ui/svg-icons/hardware/keyboard-arrow-left")},function(e,t){e.exports=require("material-ui/svg-icons/hardware/keyboard-arrow-right")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),o=r(a),i=n(69),l=n(70),c=n(5),u=r(c),s=n(3),f=n(4),d=n(71),p=r(d),m=n(14),y=n(72),h=r(y),v=n(73),g=r(v),b=n(74);t.default=function(e,t,n){var r=(0,h.default)({palette:{primary1Color:b.green500,primary2Color:b.green700,primary3Color:b.green100}},{avatar:{borderColor:null},userAgent:e.headers["user-agent"]||"all"}),a=(0,i.renderToString)(o.default.createElement(g.default,{muiTheme:r},o.default.createElement(s.Provider,{store:t},o.default.createElement(l.StaticRouter,{location:e.url,context:n},o.default.createElement("div",null,(0,f.renderRoutes)(u.default)))))),c=m.Helmet.renderStatic();return"\n        <html>\n            <head>\n            "+c.title.toString()+"\n            "+c.meta.toString()+'\n            <link rel="stylesheet" type="text/css" href="./main.css">\n\n            </head>\n                <body>\n                    <div id="root">'+a+"</div>\n                    <script>\n                    window.INITIAL_STATE = "+(0,p.default)(t.getState())+'\n                  <\/script>\n                    <script src="bundle.js"><\/script>\n                </body>\n            </html>\n            '}},function(e,t){e.exports=require("react-dom/server")},function(e,t){e.exports=require("react-router-dom")},function(e,t){e.exports=require("serialize-javascript")},function(e,t){e.exports=require("material-ui/styles/getMuiTheme")},function(e,t){e.exports=require("material-ui/styles/MuiThemeProvider")},function(e,t){e.exports=require("material-ui/styles/colors")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),o=n(76),i=r(o),l=n(77),c=r(l),u=n(81),s=r(u),f=function(e){return e=e||"",s.default.create({baseURL:"http://react-ssr-api.herokuapp.com",headers:{cookie:e}})};t.default=function(e){return(0,a.createStore)(c.default,{},(0,a.applyMiddleware)(i.default.withExtraArgument(f(e.get("cookie")))))}},function(e,t){e.exports=require("redux-thunk")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(78),a=function(e){return e&&e.__esModule?e:{default:e}}(r),o=function(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments[1];return Object.keys(e).reduce(function(r,a){return r[a]=e[a](t[a],n),r},{})}}({reducer:a.default});t.default=o},function(e,t,n){"use strict";function r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.initialState,t=arguments[1];switch(t.type){case c.SET_SELECTED_CATEGORY:i.stateUtils.clearSelectedCategories(e);return i.stateUtils.setSelectedCategory(e,t.displayKey);case c.CLEAR_CATEGORIES:return i.stateUtils.clearSelectedCategories(e);case c.NEXT_SLIDE:var n=u(e.experience.length,1,e.selectedTile);return a({},e,{selectedTile:n});case c.PREV_SLIDE:var r=u(e.experience.length,-1,e.selectedTile);return a({},e,{selectedTile:r});case c.SHOW_HIDE_PAPER:return a({},e,{showExperience:!e.showExperience});default:return e}}Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=r;var o=n(79),i=n(80),l=n(13),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(l),u=function(e,t,n){var r=n+t;return r>=e&&(r=0),r<0&&(r=e-1),r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.initialState={selectedTile:0,categories:[{title:"Contact Me",key:"contactMe",selected:!1,iconIndex:1},{title:"Experience",key:"experience",selected:!1,iconIndex:2},{title:"Education",key:"education",selected:!1,iconIndex:3},{title:"skills",key:"skills",selected:!1,iconIndex:4}],showExperience:!1,experience:[{key:"gnx",company:"GreenNexxus",title:"Fullstack ASP.NET developer",location:[{lat:45.9607044,lng:-66.6415046}],center:{lat:45.9636,lng:-66.6431},date:{start:"04/01/2013",end:"07/05/2014"}},{key:"sfw",company:"Safeway",title:"Fullstack ASP.NET developer",location:[{lat:51.111412,lng:-114.039921}],center:{lat:51.1,lng:-114},date:{start:"10/01/2014",end:"1/05/2015"}},{key:"ntt",company:"NTT Data",title:"Java Developer",location:[{lat:44.6508,lng:-63.5771}],center:{lat:44.6488,lng:-63.5752},date:{start:"01/01/2015",end:"12/31/2015"}},{key:"inf",company:"Infusion",title:"Front End Consultant",location:[{lat:41.1729996,lng:-73.36395519999996}],center:{lat:41.141472,lng:-73.3579049},date:{start:"01/01/2016",end:"05/30/2017"}},{key:"cap",company:"Capco",title:"Front End Consultant",location:[{lat:43.649722,lng:-79.376207}],center:{lat:43.6532,lng:-79.3832},date:{start:"06/01/2017",end:"10/31/2017"}},{key:"hdc",company:"Home Depot Canada",title:"Sr. Front End Developer",location:[{lat:43.728811,lng:-79.329219}],center:{lat:43.75,lng:-79.32},date:{start:"11/01/2017",end:"Present"}}]}},function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.stateUtils={setSelectedCategory:function(e,t){return e.categories.forEach(function(e){e.key===t&&(e.selected=!0)}),a({},e,{categories:[].concat(r(e.categories))})},clearSelectedCategories:function(e){var t=a({},e);return t.categories.forEach(function(e){e.selected=!1}),a({},e,{categories:[].concat(r(t.categories))})}}},function(e,t){e.exports=require("axios")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,